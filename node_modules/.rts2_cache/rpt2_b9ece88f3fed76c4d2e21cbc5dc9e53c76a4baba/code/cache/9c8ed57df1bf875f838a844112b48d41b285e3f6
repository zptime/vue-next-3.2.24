{"code":"// these keywords should not appear inside expressions, but operators like\r\nimport { createCompilerError } from './errors';\r\n// typeof, instanceof and in are allowed\r\nconst prohibitedKeywordRE = new RegExp('\\\\b' +\r\n    ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n        'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n        'extends,finally,continue,debugger,function,arguments,typeof,void')\r\n        .split(',')\r\n        .join('\\\\b|\\\\b') +\r\n    '\\\\b');\r\n// strip strings in expressions\r\nconst stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn't prefix expressions.\r\n */\r\nexport function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {\r\n    const exp = node.content;\r\n    // empty expressions are validated per-directive since some directives\r\n    // do allow empty expressions.\r\n    if (!exp.trim()) {\r\n        return;\r\n    }\r\n    try {\r\n        new Function(asRawStatements\r\n            ? ` ${exp} `\r\n            : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);\r\n    }\r\n    catch (e) {\r\n        let message = e.message;\r\n        const keywordMatch = exp\r\n            .replace(stripStringRE, '')\r\n            .match(prohibitedKeywordRE);\r\n        if (keywordMatch) {\r\n            message = `avoid using JavaScript keyword as property name: \"${keywordMatch[0]}\"`;\r\n        }\r\n        context.onError(createCompilerError(44 /* X_INVALID_EXPRESSION */, node.loc, undefined, message));\r\n    }\r\n}\r\n//# sourceMappingURL=validateExpression.js.map","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/ast.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/transform.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/errors.ts"],"map":"{\"version\":3,\"file\":\"validateExpression.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../packages/compiler-core/src/validateExpression.ts\"],\"names\":[],\"mappings\":\"AAAA,0EAA0E;AAI1E,OAAO,EAAE,mBAAmB,EAAc,MAAM,UAAU,CAAA;AAE1D,wCAAwC;AACxC,MAAM,mBAAmB,GAAG,IAAI,MAAM,CACpC,KAAK;IACH,CACE,yEAAyE;QACzE,qEAAqE;QACrE,kEAAkE,CACnE;SACE,KAAK,CAAC,GAAG,CAAC;SACV,IAAI,CAAC,SAAS,CAAC;IAClB,KAAK,CACR,CAAA;AAED,+BAA+B;AAC/B,MAAM,aAAa,GACjB,gGAAgG,CAAA;AAElG;;;;GAIG;AACH,MAAM,UAAU,yBAAyB,CACvC,IAA0B,EAC1B,OAAyB,EACzB,QAAQ,GAAG,KAAK,EAChB,eAAe,GAAG,KAAK;IAEvB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAA;IAExB,sEAAsE;IACtE,8BAA8B;IAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;QACf,OAAM;KACP;IAED,IAAI;QACF,IAAI,QAAQ,CACV,eAAe;YACb,CAAC,CAAC,IAAI,GAAG,GAAG;YACZ,CAAC,CAAC,UAAU,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,CACzD,CAAA;KACF;IAAC,OAAO,CAAM,EAAE;QACf,IAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAA;QACvB,MAAM,YAAY,GAAG,GAAG;aACrB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;aAC1B,KAAK,CAAC,mBAAmB,CAAC,CAAA;QAC7B,IAAI,YAAY,EAAE;YAChB,OAAO,GAAG,qDAAqD,YAAY,CAAC,CAAC,CAAC,GAAG,CAAA;SAClF;QACD,OAAO,CAAC,OAAO,CACb,mBAAmB,gCAEjB,IAAI,CAAC,GAAG,EACR,SAAS,EACT,OAAO,CACR,CACF,CAAA;KACF;AACH,CAAC\"}"}
