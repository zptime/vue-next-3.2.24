{"code":"import { createRenderer, createHydrationRenderer, warn, isRuntimeOnly, compatUtils } from '@vue/runtime-core';\r\nimport { nodeOps } from './nodeOps';\r\nimport { patchProp } from './patchProp';\r\n// Importing from the compiler, will be tree-shaken in prod\r\nimport { isFunction, isString, isHTMLTag, isSVGTag, extend, NOOP } from '@vue/shared';\r\nconst rendererOptions = extend({ patchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return (renderer ||\r\n        (renderer = createRenderer(rendererOptions)));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nexport const render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nexport const hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nexport const createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if (__DEV__) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!isFunction(component) && !component.render && !component.template) {\r\n            // __UNSAFE__\r\n            // Reason: potential execution of JS expressions in in-DOM template.\r\n            // The user must make sure the in-DOM template is trusted. If it's\r\n            // rendered by the server, the template should not contain any user data.\r\n            component.template = container.innerHTML;\r\n            // 2.x compat check\r\n            if (__COMPAT__ && __DEV__) {\r\n                for (let i = 0; i < container.attributes.length; i++) {\r\n                    const attr = container.attributes[i];\r\n                    if (attr.name !== 'v-cloak' && /^(v-|:|@)/.test(attr.name)) {\r\n                        compatUtils.warnDeprecation(\"GLOBAL_MOUNT_CONTAINER\" /* GLOBAL_MOUNT_CONTAINER */, null);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        const proxy = mount(container, false, container instanceof SVGElement);\r\n        if (container instanceof Element) {\r\n            container.removeAttribute('v-cloak');\r\n            container.setAttribute('data-v-app', '');\r\n        }\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nexport const createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if (__DEV__) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true, container instanceof SVGElement);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, 'isNativeTag', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\n// dev only\r\nfunction injectCompilerOptionsCheck(app) {\r\n    if (isRuntimeOnly()) {\r\n        const isCustomElement = app.config.isCustomElement;\r\n        Object.defineProperty(app.config, 'isCustomElement', {\r\n            get() {\r\n                return isCustomElement;\r\n            },\r\n            set() {\r\n                warn(`The \\`isCustomElement\\` config option is deprecated. Use ` +\r\n                    `\\`compilerOptions.isCustomElement\\` instead.`);\r\n            }\r\n        });\r\n        const compilerOptions = app.config.compilerOptions;\r\n        const msg = `The \\`compilerOptions\\` config option is only respected when using ` +\r\n            `a build of Vue.js that includes the runtime compiler (aka \"full build\"). ` +\r\n            `Since you are using the runtime-only build, \\`compilerOptions\\` ` +\r\n            `must be passed to \\`@vue/compiler-dom\\` in the build setup instead.\\n` +\r\n            `- For vue-loader: pass it via vue-loader's \\`compilerOptions\\` loader option.\\n` +\r\n            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n` +\r\n            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;\r\n        Object.defineProperty(app.config, 'compilerOptions', {\r\n            get() {\r\n                warn(msg);\r\n                return compilerOptions;\r\n            },\r\n            set() {\r\n                warn(msg);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if (__DEV__ && !res) {\r\n            warn(`Failed to mount app: mount target selector \"${container}\" returned null.`);\r\n        }\r\n        return res;\r\n    }\r\n    if (__DEV__ &&\r\n        window.ShadowRoot &&\r\n        container instanceof window.ShadowRoot &&\r\n        container.mode === 'closed') {\r\n        warn(`mounting on a ShadowRoot with \\`{mode: \"closed\"}\\` may lead to unpredictable bugs`);\r\n    }\r\n    return container;\r\n}\r\n// Custom element support\r\nexport { defineCustomElement, defineSSRCustomElement, VueElement } from './apiCustomElement';\r\n// SFC CSS utilities\r\nexport { useCssModule } from './helpers/useCssModule';\r\nexport { useCssVars } from './helpers/useCssVars';\r\n// DOM-only components\r\nexport { Transition } from './components/Transition';\r\nexport { TransitionGroup } from './components/TransitionGroup';\r\n// **Internal** DOM-only runtime directive helpers\r\nexport { vModelText, vModelCheckbox, vModelRadio, vModelSelect, vModelDynamic } from './directives/vModel';\r\nexport { withModifiers, withKeys } from './directives/vOn';\r\nexport { vShow } from './directives/vShow';\r\nimport { initVModelForSSR } from './directives/vModel';\r\nimport { initVShowForSSR } from './directives/vShow';\r\nlet ssrDirectiveInitialized = false;\r\n/**\r\n * @internal\r\n */\r\nexport const initDirectivesForSSR = __SSR__\r\n    ? () => {\r\n        if (!ssrDirectiveInitialized) {\r\n            ssrDirectiveInitialized = true;\r\n            initVModelForSSR();\r\n            initVShowForSSR();\r\n        }\r\n    }\r\n    : NOOP;\r\n// re-export everything from core\r\n// h, Component, reactivity API, nextTick, flags & types\r\nexport * from '@vue/runtime-core';\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/nodeOps.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/patchProp.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/apiCustomElement.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/helpers/useCssModule.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/helpers/useCssVars.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/components/Transition.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/components/TransitionGroup.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/directives/vModel.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/directives/vOn.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/directives/vShow.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/directives/vModel.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-dom/src/directives/vShow.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/reactivity/src/index.ts"]}
