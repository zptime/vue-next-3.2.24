{"code":"import { createSimpleExpression, createObjectProperty, createCompoundExpression } from '../ast';\r\nimport { createCompilerError } from '../errors';\r\nimport { isMemberExpression, isSimpleIdentifier, hasScopeRef, isStaticExp } from '../utils';\r\nimport { IS_REF } from '../runtimeHelpers';\r\nexport const transformModel = (dir, node, context) => {\r\n    const { exp, arg } = dir;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(41 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));\r\n        return createTransformProps();\r\n    }\r\n    const rawExp = exp.loc.source;\r\n    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : rawExp;\r\n    // im SFC <script setup> inline mode, the exp may have been transformed into\r\n    // _unref(exp)\r\n    const bindingType = context.bindingMetadata[rawExp];\r\n    const maybeRef = !__BROWSER__ &&\r\n        context.inline &&\r\n        bindingType &&\r\n        bindingType !== \"setup-const\" /* SETUP_CONST */;\r\n    if (!expString.trim() ||\r\n        (!isMemberExpression(expString, context) && !maybeRef)) {\r\n        context.onError(createCompilerError(42 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    if (!__BROWSER__ &&\r\n        context.prefixIdentifiers &&\r\n        isSimpleIdentifier(expString) &&\r\n        context.identifiers[expString]) {\r\n        context.onError(createCompilerError(43 /* X_V_MODEL_ON_SCOPE_VARIABLE */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    const propName = arg ? arg : createSimpleExpression('modelValue', true);\r\n    const eventName = arg\r\n        ? isStaticExp(arg)\r\n            ? `onUpdate:${arg.content}`\r\n            : createCompoundExpression(['\"onUpdate:\" + ', arg])\r\n        : `onUpdate:modelValue`;\r\n    let assignmentExp;\r\n    const eventArg = context.isTS ? `($event: any)` : `$event`;\r\n    if (maybeRef) {\r\n        if (bindingType === \"setup-ref\" /* SETUP_REF */) {\r\n            // v-model used on known ref.\r\n            assignmentExp = createCompoundExpression([\r\n                `${eventArg} => ((`,\r\n                createSimpleExpression(rawExp, false, exp.loc),\r\n                `).value = $event)`\r\n            ]);\r\n        }\r\n        else {\r\n            // v-model used on a potentially ref binding in <script setup> inline mode.\r\n            // the assignment needs to check whether the binding is actually a ref.\r\n            const altAssignment = bindingType === \"setup-let\" /* SETUP_LET */ ? `${rawExp} = $event` : `null`;\r\n            assignmentExp = createCompoundExpression([\r\n                `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,\r\n                createSimpleExpression(rawExp, false, exp.loc),\r\n                `).value = $event : ${altAssignment})`\r\n            ]);\r\n        }\r\n    }\r\n    else {\r\n        assignmentExp = createCompoundExpression([\r\n            `${eventArg} => ((`,\r\n            exp,\r\n            `) = $event)`\r\n        ]);\r\n    }\r\n    const props = [\r\n        // modelValue: foo\r\n        createObjectProperty(propName, dir.exp),\r\n        // \"onUpdate:modelValue\": $event => (foo = $event)\r\n        createObjectProperty(eventName, assignmentExp)\r\n    ];\r\n    // cache v-model handler if applicable (when it doesn't refer any scope vars)\r\n    if (!__BROWSER__ &&\r\n        context.prefixIdentifiers &&\r\n        !context.inVOnce &&\r\n        context.cacheHandlers &&\r\n        !hasScopeRef(exp, context.identifiers)) {\r\n        props[1].value = context.cache(props[1].value);\r\n    }\r\n    // modelModifiers: { foo: true, \"bar-baz\": true }\r\n    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {\r\n        const modifiers = dir.modifiers\r\n            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n            .join(`, `);\r\n        const modifiersKey = arg\r\n            ? isStaticExp(arg)\r\n                ? `${arg.content}Modifiers`\r\n                : createCompoundExpression([arg, ' + \"Modifiers\"'])\r\n            : `modelModifiers`;\r\n        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */)));\r\n    }\r\n    return createTransformProps(props);\r\n};\r\nfunction createTransformProps(props = []) {\r\n    return { props };\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/transform.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/ast.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/errors.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/utils.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/runtimeHelpers.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/options.ts"]}
