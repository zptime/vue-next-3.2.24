{"code":"import { callWithErrorHandling } from '../errorHandling';\r\nimport { popWarningContext, pushWarningContext } from '../warning';\r\nimport { warnDeprecation, isCompatEnabled } from './compatConfig';\r\nexport const compatModelEventPrefix = `onModelCompat:`;\r\nconst warnedTypes = new WeakSet();\r\nexport function convertLegacyVModelProps(vnode) {\r\n    const { type, shapeFlag, props, dynamicProps } = vnode;\r\n    if (shapeFlag & 6 /* COMPONENT */ && props && 'modelValue' in props) {\r\n        if (!isCompatEnabled(\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */, \r\n        // this is a special case where we want to use the vnode component's\r\n        // compat config instead of the current rendering instance (which is the\r\n        // parent of the component that exposes v-model)\r\n        { type })) {\r\n            return;\r\n        }\r\n        if (__DEV__ && !warnedTypes.has(type)) {\r\n            pushWarningContext(vnode);\r\n            warnDeprecation(\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */, { type }, type);\r\n            popWarningContext();\r\n            warnedTypes.add(type);\r\n        }\r\n        // v3 compiled model code -> v2 compat props\r\n        // modelValue -> value\r\n        // onUpdate:modelValue -> onModelCompat:input\r\n        const { prop = 'value', event = 'input' } = type.model || {};\r\n        if (prop !== 'modelValue') {\r\n            props[prop] = props.modelValue;\r\n            delete props.modelValue;\r\n        }\r\n        // important: update dynamic props\r\n        if (dynamicProps) {\r\n            dynamicProps[dynamicProps.indexOf('modelValue')] = prop;\r\n        }\r\n        props[compatModelEventPrefix + event] = props['onUpdate:modelValue'];\r\n        delete props['onUpdate:modelValue'];\r\n    }\r\n}\r\nexport function compatModelEmit(instance, event, args) {\r\n    if (!isCompatEnabled(\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */, instance)) {\r\n        return;\r\n    }\r\n    const props = instance.vnode.props;\r\n    const modelHandler = props && props[compatModelEventPrefix + event];\r\n    if (modelHandler) {\r\n        callWithErrorHandling(modelHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/component.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/errorHandling.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/vnode.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/warning.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/compatConfig.ts"]}
