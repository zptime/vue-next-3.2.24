{"code":"import namedCharacterReferences from './namedChars.json';\r\n// lazy compute this to make this file tree-shakable for browser\r\nlet maxCRNameLength;\r\nexport const decodeHtml = (rawText, asAttr) => {\r\n    let offset = 0;\r\n    const end = rawText.length;\r\n    let decodedText = '';\r\n    function advance(length) {\r\n        offset += length;\r\n        rawText = rawText.slice(length);\r\n    }\r\n    while (offset < end) {\r\n        const head = /&(?:#x?)?/i.exec(rawText);\r\n        if (!head || offset + head.index >= end) {\r\n            const remaining = end - offset;\r\n            decodedText += rawText.slice(0, remaining);\r\n            advance(remaining);\r\n            break;\r\n        }\r\n        // Advance to the \"&\".\r\n        decodedText += rawText.slice(0, head.index);\r\n        advance(head.index);\r\n        if (head[0] === '&') {\r\n            // Named character reference.\r\n            let name = '';\r\n            let value = undefined;\r\n            if (/[0-9a-z]/i.test(rawText[1])) {\r\n                if (!maxCRNameLength) {\r\n                    maxCRNameLength = Object.keys(namedCharacterReferences).reduce((max, name) => Math.max(max, name.length), 0);\r\n                }\r\n                for (let length = maxCRNameLength; !value && length > 0; --length) {\r\n                    name = rawText.slice(1, 1 + length);\r\n                    value = namedCharacterReferences[name];\r\n                }\r\n                if (value) {\r\n                    const semi = name.endsWith(';');\r\n                    if (asAttr &&\r\n                        !semi &&\r\n                        /[=a-z0-9]/i.test(rawText[name.length + 1] || '')) {\r\n                        decodedText += '&' + name;\r\n                        advance(1 + name.length);\r\n                    }\r\n                    else {\r\n                        decodedText += value;\r\n                        advance(1 + name.length);\r\n                    }\r\n                }\r\n                else {\r\n                    decodedText += '&' + name;\r\n                    advance(1 + name.length);\r\n                }\r\n            }\r\n            else {\r\n                decodedText += '&';\r\n                advance(1);\r\n            }\r\n        }\r\n        else {\r\n            // Numeric character reference.\r\n            const hex = head[0] === '&#x';\r\n            const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;\r\n            const body = pattern.exec(rawText);\r\n            if (!body) {\r\n                decodedText += head[0];\r\n                advance(head[0].length);\r\n            }\r\n            else {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state\r\n                let cp = Number.parseInt(body[1], hex ? 16 : 10);\r\n                if (cp === 0) {\r\n                    cp = 0xfffd;\r\n                }\r\n                else if (cp > 0x10ffff) {\r\n                    cp = 0xfffd;\r\n                }\r\n                else if (cp >= 0xd800 && cp <= 0xdfff) {\r\n                    cp = 0xfffd;\r\n                }\r\n                else if ((cp >= 0xfdd0 && cp <= 0xfdef) || (cp & 0xfffe) === 0xfffe) {\r\n                    // noop\r\n                }\r\n                else if ((cp >= 0x01 && cp <= 0x08) ||\r\n                    cp === 0x0b ||\r\n                    (cp >= 0x0d && cp <= 0x1f) ||\r\n                    (cp >= 0x7f && cp <= 0x9f)) {\r\n                    cp = CCR_REPLACEMENTS[cp] || cp;\r\n                }\r\n                decodedText += String.fromCodePoint(cp);\r\n                advance(body[0].length);\r\n            }\r\n        }\r\n    }\r\n    return decodedText;\r\n};\r\n// https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state\r\nconst CCR_REPLACEMENTS = {\r\n    0x80: 0x20ac,\r\n    0x82: 0x201a,\r\n    0x83: 0x0192,\r\n    0x84: 0x201e,\r\n    0x85: 0x2026,\r\n    0x86: 0x2020,\r\n    0x87: 0x2021,\r\n    0x88: 0x02c6,\r\n    0x89: 0x2030,\r\n    0x8a: 0x0160,\r\n    0x8b: 0x2039,\r\n    0x8c: 0x0152,\r\n    0x8e: 0x017d,\r\n    0x91: 0x2018,\r\n    0x92: 0x2019,\r\n    0x93: 0x201c,\r\n    0x94: 0x201d,\r\n    0x95: 0x2022,\r\n    0x96: 0x2013,\r\n    0x97: 0x2014,\r\n    0x98: 0x02dc,\r\n    0x99: 0x2122,\r\n    0x9a: 0x0161,\r\n    0x9b: 0x203a,\r\n    0x9c: 0x0153,\r\n    0x9e: 0x017e,\r\n    0x9f: 0x0178\r\n};\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-dom/src/namedChars.json"]}
