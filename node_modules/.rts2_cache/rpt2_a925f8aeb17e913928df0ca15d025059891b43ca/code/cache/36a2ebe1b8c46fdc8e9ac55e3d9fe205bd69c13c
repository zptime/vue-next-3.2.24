{"code":"import { isArray } from '@vue/shared';\r\nimport { callWithAsyncErrorHandling } from '../errorHandling';\r\nimport { assertCompatEnabled } from './compatConfig';\r\nconst eventRegistryMap = /*#__PURE__*/ new WeakMap();\r\nexport function getRegistry(instance) {\r\n    let events = eventRegistryMap.get(instance);\r\n    if (!events) {\r\n        eventRegistryMap.set(instance, (events = Object.create(null)));\r\n    }\r\n    return events;\r\n}\r\nexport function on(instance, event, fn) {\r\n    if (isArray(event)) {\r\n        event.forEach(e => on(instance, e, fn));\r\n    }\r\n    else {\r\n        if (event.startsWith('hook:')) {\r\n            assertCompatEnabled(\"INSTANCE_EVENT_HOOKS\" /* INSTANCE_EVENT_HOOKS */, instance, event);\r\n        }\r\n        else {\r\n            assertCompatEnabled(\"INSTANCE_EVENT_EMITTER\" /* INSTANCE_EVENT_EMITTER */, instance);\r\n        }\r\n        const events = getRegistry(instance);\r\n        (events[event] || (events[event] = [])).push(fn);\r\n    }\r\n    return instance.proxy;\r\n}\r\nexport function once(instance, event, fn) {\r\n    const wrapped = (...args) => {\r\n        off(instance, event, wrapped);\r\n        fn.call(instance.proxy, ...args);\r\n    };\r\n    wrapped.fn = fn;\r\n    on(instance, event, wrapped);\r\n    return instance.proxy;\r\n}\r\nexport function off(instance, event, fn) {\r\n    assertCompatEnabled(\"INSTANCE_EVENT_EMITTER\" /* INSTANCE_EVENT_EMITTER */, instance);\r\n    const vm = instance.proxy;\r\n    // all\r\n    if (!event) {\r\n        eventRegistryMap.set(instance, Object.create(null));\r\n        return vm;\r\n    }\r\n    // array of events\r\n    if (isArray(event)) {\r\n        event.forEach(e => off(instance, e, fn));\r\n        return vm;\r\n    }\r\n    // specific event\r\n    const events = getRegistry(instance);\r\n    const cbs = events[event];\r\n    if (!cbs) {\r\n        return vm;\r\n    }\r\n    if (!fn) {\r\n        events[event] = undefined;\r\n        return vm;\r\n    }\r\n    events[event] = cbs.filter(cb => !(cb === fn || cb.fn === fn));\r\n    return vm;\r\n}\r\nexport function emit(instance, event, args) {\r\n    const cbs = getRegistry(instance)[event];\r\n    if (cbs) {\r\n        callWithAsyncErrorHandling(cbs.map(cb => cb.bind(instance.proxy)), instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    return instance.proxy;\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/component.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/errorHandling.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/compatConfig.ts"]}
