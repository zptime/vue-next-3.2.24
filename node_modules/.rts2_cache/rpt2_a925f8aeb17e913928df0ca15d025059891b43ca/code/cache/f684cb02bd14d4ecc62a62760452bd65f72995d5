{"code":"import { makeMap } from './makeMap';\r\nexport { makeMap };\r\nexport * from './patchFlags';\r\nexport * from './shapeFlags';\r\nexport * from './slotFlags';\r\nexport * from './globalsWhitelist';\r\nexport * from './codeframe';\r\nexport * from './normalizeProp';\r\nexport * from './domTagConfig';\r\nexport * from './domAttrConfig';\r\nexport * from './escapeHtml';\r\nexport * from './looseEqual';\r\nexport * from './toDisplayString';\r\nexport const EMPTY_OBJ = __DEV__\r\n    ? Object.freeze({})\r\n    : {};\r\nexport const EMPTY_ARR = __DEV__ ? Object.freeze([]) : [];\r\nexport const NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nexport const NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nexport const isOn = (key) => onRE.test(key);\r\nexport const isModelListener = (key) => key.startsWith('onUpdate:');\r\nexport const extend = Object.assign;\r\nexport const remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nexport const isArray = Array.isArray;\r\nexport const isMap = (val) => toTypeString(val) === '[object Map]';\r\nexport const isSet = (val) => toTypeString(val) === '[object Set]';\r\nexport const isDate = (val) => val instanceof Date;\r\nexport const isFunction = (val) => typeof val === 'function';\r\nexport const isString = (val) => typeof val === 'string';\r\nexport const isSymbol = (val) => typeof val === 'symbol';\r\nexport const isObject = (val) => val !== null && typeof val === 'object';\r\nexport const isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nexport const objectToString = Object.prototype.toString;\r\nexport const toTypeString = (value) => objectToString.call(value);\r\nexport const toRawType = (value) => {\r\n    // extract \"RawType\" from strings like \"[object RawType]\"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nexport const isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nexport const isIntegerKey = (key) => isString(key) &&\r\n    key !== 'NaN' &&\r\n    key[0] !== '-' &&\r\n    '' + parseInt(key, 10) === key;\r\nexport const isReservedProp = /*#__PURE__*/ makeMap(\r\n// the leading comma is intentional so empty string \"\" is also included\r\n',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nexport const camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nexport const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nexport const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nexport const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\r\n// compare whether a value has changed, accounting for NaN.\r\nexport const hasChanged = (value, oldValue) => !Object.is(value, oldValue);\r\nexport const invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nexport const def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nexport const toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nexport const getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== 'undefined'\r\n                ? globalThis\r\n                : typeof self !== 'undefined'\r\n                    ? self\r\n                    : typeof window !== 'undefined'\r\n                        ? window\r\n                        : typeof global !== 'undefined'\r\n                            ? global\r\n                            : {}));\r\n};\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/makeMap.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/patchFlags.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/shapeFlags.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/slotFlags.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/globalsWhitelist.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/codeframe.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/normalizeProp.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/domTagConfig.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/domAttrConfig.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/escapeHtml.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/looseEqual.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/toDisplayString.ts"]}
