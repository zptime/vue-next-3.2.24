{"code":"import { createCompoundExpression, createObjectProperty, createSimpleExpression } from '../ast';\r\nimport { camelize, toHandlerKey } from '@vue/shared';\r\nimport { createCompilerError } from '../errors';\r\nimport { processExpression } from './transformExpression';\r\nimport { validateBrowserExpression } from '../validateExpression';\r\nimport { hasScopeRef, isMemberExpression } from '../utils';\r\nimport { TO_HANDLER_KEY } from '../runtimeHelpers';\r\nconst fnExpRE = /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nexport const transformOn = (dir, node, context, augmentor) => {\r\n    const { loc, modifiers, arg } = dir;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(35 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            const rawName = arg.content;\r\n            // for all event listeners, auto convert it to camelCase. See issue #2249\r\n            eventName = createSimpleExpression(toHandlerKey(camelize(rawName)), true, arg.loc);\r\n        }\r\n        else {\r\n            // #2388\r\n            eventName = createCompoundExpression([\r\n                `${context.helperString(TO_HANDLER_KEY)}(`,\r\n                arg,\r\n                `)`\r\n            ]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // handler processing\r\n    let exp = dir.exp;\r\n    if (exp && !exp.content.trim()) {\r\n        exp = undefined;\r\n    }\r\n    let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\r\n    if (exp) {\r\n        const isMemberExp = isMemberExpression(exp.content, context);\r\n        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\r\n        const hasMultipleStatements = exp.content.includes(`;`);\r\n        // process the expression since it's been skipped\r\n        if (!__BROWSER__ && context.prefixIdentifiers) {\r\n            isInlineStatement && context.addIdentifiers(`$event`);\r\n            exp = dir.exp = processExpression(exp, context, false, hasMultipleStatements);\r\n            isInlineStatement && context.removeIdentifiers(`$event`);\r\n            // with scope analysis, the function is hoistable if it has no reference\r\n            // to scope variables.\r\n            shouldCache =\r\n                context.cacheHandlers &&\r\n                    // unnecessary to cache inside v-once\r\n                    !context.inVOnce &&\r\n                    // runtime constants don't need to be cached\r\n                    // (this is analyzed by compileScript in SFC <script setup>)\r\n                    !(exp.type === 4 /* SIMPLE_EXPRESSION */ && exp.constType > 0) &&\r\n                    // #1541 bail if this is a member exp handler passed to a component -\r\n                    // we need to use the original function to preserve arity,\r\n                    // e.g. <transition> relies on checking cb.length to determine\r\n                    // transition end handling. Inline function is ok since its arity\r\n                    // is preserved even when cached.\r\n                    !(isMemberExp && node.tagType === 1 /* COMPONENT */) &&\r\n                    // bail if the function references closure variables (v-for, v-slot)\r\n                    // it must be passed fresh to avoid stale values.\r\n                    !hasScopeRef(exp, context.identifiers);\r\n            // If the expression is optimizable and is a member expression pointing\r\n            // to a function, turn it into invocation (and wrap in an arrow function\r\n            // below) so that it always accesses the latest value when called - thus\r\n            // avoiding the need to be patched.\r\n            if (shouldCache && isMemberExp) {\r\n                if (exp.type === 4 /* SIMPLE_EXPRESSION */) {\r\n                    exp.content = `${exp.content} && ${exp.content}(...args)`;\r\n                }\r\n                else {\r\n                    exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];\r\n                }\r\n            }\r\n        }\r\n        if (__DEV__ && __BROWSER__) {\r\n            validateBrowserExpression(exp, context, false, hasMultipleStatements);\r\n        }\r\n        if (isInlineStatement || (shouldCache && isMemberExp)) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `${isInlineStatement\r\n                    ? !__BROWSER__ && context.isTS\r\n                        ? `($event: any)`\r\n                        : `$event`\r\n                    : `${!__BROWSER__ && context.isTS ? `\\n//@ts-ignore\\n` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\r\n                exp,\r\n                hasMultipleStatements ? `}` : `)`\r\n            ]);\r\n        }\r\n    }\r\n    let ret = {\r\n        props: [\r\n            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))\r\n        ]\r\n    };\r\n    // apply extended compiler augmentor\r\n    if (augmentor) {\r\n        ret = augmentor(ret);\r\n    }\r\n    if (shouldCache) {\r\n        // cache handlers so that it's always the same handler being passed down.\r\n        // this avoids unnecessary re-renders when users use inline handlers on\r\n        // components.\r\n        ret.props[0].value = context.cache(ret.props[0].value);\r\n    }\r\n    // mark the key as handler for props normalization check\r\n    ret.props.forEach(p => (p.key.isHandlerKey = true));\r\n    return ret;\r\n};\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/transform.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/ast.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/errors.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/transforms/transformExpression.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/validateExpression.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/utils.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/compiler-core/src/runtimeHelpers.ts"]}
