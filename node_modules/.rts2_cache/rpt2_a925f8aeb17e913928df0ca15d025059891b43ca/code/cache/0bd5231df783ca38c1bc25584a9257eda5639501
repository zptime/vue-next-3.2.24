{"code":"import { isArray, remove } from '@vue/shared';\r\nimport { warnDeprecation } from './compatConfig';\r\nexport function convertLegacyRefInFor(vnode) {\r\n    // refInFor\r\n    if (vnode.props && vnode.props.refInFor) {\r\n        delete vnode.props.refInFor;\r\n        if (vnode.ref) {\r\n            if (isArray(vnode.ref)) {\r\n                vnode.ref.forEach(r => (r.f = true));\r\n            }\r\n            else {\r\n                vnode.ref.f = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function registerLegacyRef(refs, key, value, owner, isInFor, isUnmount) {\r\n    const existing = refs[key];\r\n    if (isUnmount) {\r\n        if (isArray(existing)) {\r\n            remove(existing, value);\r\n        }\r\n        else {\r\n            refs[key] = null;\r\n        }\r\n    }\r\n    else if (isInFor) {\r\n        __DEV__ && warnDeprecation(\"V_FOR_REF\" /* V_FOR_REF */, owner);\r\n        if (!isArray(existing)) {\r\n            refs[key] = [value];\r\n        }\r\n        else if (!existing.includes(value)) {\r\n            existing.push(value);\r\n        }\r\n    }\r\n    else {\r\n        refs[key] = value;\r\n    }\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/component.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/vnode.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/compatConfig.ts"]}
