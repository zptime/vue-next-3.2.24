{"code":"import { currentInstance, isInSSRComponentSetup, setCurrentInstance, unsetCurrentInstance } from './component';\r\nimport { callWithAsyncErrorHandling, ErrorTypeStrings } from './errorHandling';\r\nimport { warn } from './warning';\r\nimport { toHandlerKey } from '@vue/shared';\r\nimport { pauseTracking, resetTracking } from '@vue/reactivity';\r\nexport { onActivated, onDeactivated } from './components/KeepAlive';\r\nexport function injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                unsetCurrentInstance();\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if (__DEV__) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            (__FEATURE_SUSPENSE__\r\n                ? ` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                : ``));\r\n    }\r\n}\r\nexport const createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\r\n(!isInSSRComponentSetup || lifecycle === \"sp\" /* SERVER_PREFETCH */) &&\r\n    injectHook(lifecycle, hook, target);\r\nexport const onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nexport const onMounted = createHook(\"m\" /* MOUNTED */);\r\nexport const onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nexport const onUpdated = createHook(\"u\" /* UPDATED */);\r\nexport const onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nexport const onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nexport const onServerPrefetch = createHook(\"sp\" /* SERVER_PREFETCH */);\r\nexport const onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nexport const onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nexport function onErrorCaptured(hook, target = currentInstance) {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/component.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/componentPublicInstance.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/errorHandling.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/warning.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/reactivity/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/components/KeepAlive.ts"]}
