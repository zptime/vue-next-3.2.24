{"code":"import { getCurrentInstance, compatUtils } from '@vue/runtime-core';\r\nimport { hyphenate, isArray } from '@vue/shared';\r\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nexport const withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrow-up',\r\n    left: 'arrow-left',\r\n    right: 'arrow-right',\r\n    down: 'arrow-down',\r\n    delete: 'backspace'\r\n};\r\n/**\r\n * @private\r\n */\r\nexport const withKeys = (fn, modifiers) => {\r\n    let globalKeyCodes;\r\n    let instance = null;\r\n    if (__COMPAT__) {\r\n        instance = getCurrentInstance();\r\n        if (compatUtils.isCompatEnabled(\"CONFIG_KEY_CODES\" /* CONFIG_KEY_CODES */, instance)) {\r\n            if (instance) {\r\n                globalKeyCodes = instance.appContext.config.keyCodes;\r\n            }\r\n        }\r\n        if (__DEV__ && modifiers.some(m => /^\\d+$/.test(m))) {\r\n            compatUtils.warnDeprecation(\"V_ON_KEYCODE_MODIFIER\" /* V_ON_KEYCODE_MODIFIER */, instance);\r\n        }\r\n    }\r\n    return (event) => {\r\n        if (!('key' in event)) {\r\n            return;\r\n        }\r\n        const eventKey = hyphenate(event.key);\r\n        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return fn(event);\r\n        }\r\n        if (__COMPAT__) {\r\n            const keyCode = String(event.keyCode);\r\n            if (compatUtils.isCompatEnabled(\"V_ON_KEYCODE_MODIFIER\" /* V_ON_KEYCODE_MODIFIER */, instance) &&\r\n                modifiers.some(mod => mod == keyCode)) {\r\n                return fn(event);\r\n            }\r\n            if (globalKeyCodes) {\r\n                for (const mod of modifiers) {\r\n                    const codes = globalKeyCodes[mod];\r\n                    if (codes) {\r\n                        const matches = isArray(codes)\r\n                            ? codes.some(code => String(code) === keyCode)\r\n                            : String(codes) === keyCode;\r\n                        if (matches) {\r\n                            return fn(event);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts"]}
