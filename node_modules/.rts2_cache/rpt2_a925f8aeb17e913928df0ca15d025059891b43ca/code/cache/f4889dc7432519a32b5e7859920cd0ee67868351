{"code":"import { isReactive, reactive, track, trigger } from '@vue/reactivity';\r\nimport { isFunction, extend, NOOP, isArray, isObject, isString, invokeArrayFns } from '@vue/shared';\r\nimport { warn } from '../warning';\r\nimport { cloneVNode, createVNode } from '../vnode';\r\nimport { createComponentInstance, finishComponentSetup, isRuntimeOnly, setupComponent } from '../component';\r\nimport { mergeOptions, internalOptionMergeStrats } from '../componentOptions';\r\nimport { devtoolsInitApp, devtoolsUnmountApp } from '../devtools';\r\nimport { nextTick } from '../scheduler';\r\nimport { version } from '..';\r\nimport { installLegacyConfigWarnings, installLegacyOptionMergeStrats } from './globalConfig';\r\nimport { warnDeprecation, assertCompatEnabled, configureCompat, isCompatEnabled, softAssertCompatEnabled } from './compatConfig';\r\nexport let isCopyingConfig = false;\r\n// exported only for test\r\nexport let singletonApp;\r\nlet singletonCtor;\r\n// Legacy global Vue constructor\r\nexport function createCompatVue(createApp, createSingletonApp) {\r\n    singletonApp = createSingletonApp({});\r\n    const Vue = (singletonCtor = function Vue(options = {}) {\r\n        return createCompatApp(options, Vue);\r\n    });\r\n    function createCompatApp(options = {}, Ctor) {\r\n        assertCompatEnabled(\"GLOBAL_MOUNT\" /* GLOBAL_MOUNT */, null);\r\n        const { data } = options;\r\n        if (data &&\r\n            !isFunction(data) &&\r\n            softAssertCompatEnabled(\"OPTIONS_DATA_FN\" /* OPTIONS_DATA_FN */, null)) {\r\n            options.data = () => data;\r\n        }\r\n        const app = createApp(options);\r\n        if (Ctor !== Vue) {\r\n            applySingletonPrototype(app, Ctor);\r\n        }\r\n        const vm = app._createRoot(options);\r\n        if (options.el) {\r\n            return vm.$mount(options.el);\r\n        }\r\n        else {\r\n            return vm;\r\n        }\r\n    }\r\n    Vue.version = __VERSION__;\r\n    Vue.config = singletonApp.config;\r\n    Vue.use = (p, ...options) => {\r\n        if (p && isFunction(p.install)) {\r\n            p.install(Vue, ...options);\r\n        }\r\n        else if (isFunction(p)) {\r\n            p(Vue, ...options);\r\n        }\r\n        return Vue;\r\n    };\r\n    Vue.mixin = m => {\r\n        singletonApp.mixin(m);\r\n        return Vue;\r\n    };\r\n    Vue.component = ((name, comp) => {\r\n        if (comp) {\r\n            singletonApp.component(name, comp);\r\n            return Vue;\r\n        }\r\n        else {\r\n            return singletonApp.component(name);\r\n        }\r\n    });\r\n    Vue.directive = ((name, dir) => {\r\n        if (dir) {\r\n            singletonApp.directive(name, dir);\r\n            return Vue;\r\n        }\r\n        else {\r\n            return singletonApp.directive(name);\r\n        }\r\n    });\r\n    Vue.options = { _base: Vue };\r\n    let cid = 1;\r\n    Vue.cid = cid;\r\n    Vue.nextTick = nextTick;\r\n    const extendCache = new WeakMap();\r\n    function extendCtor(extendOptions = {}) {\r\n        assertCompatEnabled(\"GLOBAL_EXTEND\" /* GLOBAL_EXTEND */, null);\r\n        if (isFunction(extendOptions)) {\r\n            extendOptions = extendOptions.options;\r\n        }\r\n        if (extendCache.has(extendOptions)) {\r\n            return extendCache.get(extendOptions);\r\n        }\r\n        const Super = this;\r\n        function SubVue(inlineOptions) {\r\n            if (!inlineOptions) {\r\n                return createCompatApp(SubVue.options, SubVue);\r\n            }\r\n            else {\r\n                return createCompatApp(mergeOptions(extend({}, SubVue.options), inlineOptions, internalOptionMergeStrats), SubVue);\r\n            }\r\n        }\r\n        SubVue.super = Super;\r\n        SubVue.prototype = Object.create(Vue.prototype);\r\n        SubVue.prototype.constructor = SubVue;\r\n        // clone non-primitive base option values for edge case of mutating\r\n        // extended options\r\n        const mergeBase = {};\r\n        for (const key in Super.options) {\r\n            const superValue = Super.options[key];\r\n            mergeBase[key] = isArray(superValue)\r\n                ? superValue.slice()\r\n                : isObject(superValue)\r\n                    ? extend(Object.create(null), superValue)\r\n                    : superValue;\r\n        }\r\n        SubVue.options = mergeOptions(mergeBase, extendOptions, internalOptionMergeStrats);\r\n        SubVue.options._base = SubVue;\r\n        SubVue.extend = extendCtor.bind(SubVue);\r\n        SubVue.mixin = Super.mixin;\r\n        SubVue.use = Super.use;\r\n        SubVue.cid = ++cid;\r\n        extendCache.set(extendOptions, SubVue);\r\n        return SubVue;\r\n    }\r\n    Vue.extend = extendCtor.bind(Vue);\r\n    Vue.set = (target, key, value) => {\r\n        assertCompatEnabled(\"GLOBAL_SET\" /* GLOBAL_SET */, null);\r\n        target[key] = value;\r\n    };\r\n    Vue.delete = (target, key) => {\r\n        assertCompatEnabled(\"GLOBAL_DELETE\" /* GLOBAL_DELETE */, null);\r\n        delete target[key];\r\n    };\r\n    Vue.observable = (target) => {\r\n        assertCompatEnabled(\"GLOBAL_OBSERVABLE\" /* GLOBAL_OBSERVABLE */, null);\r\n        return reactive(target);\r\n    };\r\n    Vue.filter = ((name, filter) => {\r\n        if (filter) {\r\n            singletonApp.filter(name, filter);\r\n            return Vue;\r\n        }\r\n        else {\r\n            return singletonApp.filter(name);\r\n        }\r\n    });\r\n    // internal utils - these are technically internal but some plugins use it.\r\n    const util = {\r\n        warn: __DEV__ ? warn : NOOP,\r\n        extend,\r\n        mergeOptions: (parent, child, vm) => mergeOptions(parent, child, vm ? undefined : internalOptionMergeStrats),\r\n        defineReactive\r\n    };\r\n    Object.defineProperty(Vue, 'util', {\r\n        get() {\r\n            assertCompatEnabled(\"GLOBAL_PRIVATE_UTIL\" /* GLOBAL_PRIVATE_UTIL */, null);\r\n            return util;\r\n        }\r\n    });\r\n    Vue.configureCompat = configureCompat;\r\n    return Vue;\r\n}\r\nexport function installAppCompatProperties(app, context, render) {\r\n    installFilterMethod(app, context);\r\n    installLegacyOptionMergeStrats(app.config);\r\n    if (!singletonApp) {\r\n        // this is the call of creating the singleton itself so the rest is\r\n        // unnecessary\r\n        return;\r\n    }\r\n    installCompatMount(app, context, render);\r\n    installLegacyAPIs(app);\r\n    applySingletonAppMutations(app);\r\n    if (__DEV__)\r\n        installLegacyConfigWarnings(app.config);\r\n}\r\nfunction installFilterMethod(app, context) {\r\n    context.filters = {};\r\n    app.filter = (name, filter) => {\r\n        assertCompatEnabled(\"FILTERS\" /* FILTERS */, null);\r\n        if (!filter) {\r\n            return context.filters[name];\r\n        }\r\n        if (__DEV__ && context.filters[name]) {\r\n            warn(`Filter \"${name}\" has already been registered.`);\r\n        }\r\n        context.filters[name] = filter;\r\n        return app;\r\n    };\r\n}\r\nfunction installLegacyAPIs(app) {\r\n    // expose global API on app instance for legacy plugins\r\n    Object.defineProperties(app, {\r\n        // so that app.use() can work with legacy plugins that extend prototypes\r\n        prototype: {\r\n            get() {\r\n                __DEV__ && warnDeprecation(\"GLOBAL_PROTOTYPE\" /* GLOBAL_PROTOTYPE */, null);\r\n                return app.config.globalProperties;\r\n            }\r\n        },\r\n        nextTick: { value: nextTick },\r\n        extend: { value: singletonCtor.extend },\r\n        set: { value: singletonCtor.set },\r\n        delete: { value: singletonCtor.delete },\r\n        observable: { value: singletonCtor.observable },\r\n        util: {\r\n            get() {\r\n                return singletonCtor.util;\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction applySingletonAppMutations(app) {\r\n    // copy over asset registries and deopt flag\r\n    ;\r\n    ['mixins', 'components', 'directives', 'filters', 'deopt'].forEach(key => {\r\n        // @ts-ignore\r\n        app._context[key] = singletonApp._context[key];\r\n    });\r\n    // copy over global config mutations\r\n    isCopyingConfig = true;\r\n    for (const key in singletonApp.config) {\r\n        if (key === 'isNativeTag')\r\n            continue;\r\n        if (isRuntimeOnly() &&\r\n            (key === 'isCustomElement' || key === 'compilerOptions')) {\r\n            continue;\r\n        }\r\n        const val = singletonApp.config[key];\r\n        // @ts-ignore\r\n        app.config[key] = val;\r\n        // compat for runtime ignoredElements -> isCustomElement\r\n        if (key === 'ignoredElements' &&\r\n            isCompatEnabled(\"CONFIG_IGNORED_ELEMENTS\" /* CONFIG_IGNORED_ELEMENTS */, null) &&\r\n            !isRuntimeOnly() &&\r\n            isArray(val)) {\r\n            app.config.compilerOptions.isCustomElement = tag => {\r\n                return val.some(v => (isString(v) ? v === tag : v.test(tag)));\r\n            };\r\n        }\r\n    }\r\n    isCopyingConfig = false;\r\n    applySingletonPrototype(app, singletonCtor);\r\n}\r\nfunction applySingletonPrototype(app, Ctor) {\r\n    // copy prototype augmentations as config.globalProperties\r\n    const enabled = isCompatEnabled(\"GLOBAL_PROTOTYPE\" /* GLOBAL_PROTOTYPE */, null);\r\n    if (enabled) {\r\n        app.config.globalProperties = Object.create(Ctor.prototype);\r\n    }\r\n    let hasPrototypeAugmentations = false;\r\n    const descriptors = Object.getOwnPropertyDescriptors(Ctor.prototype);\r\n    for (const key in descriptors) {\r\n        if (key !== 'constructor') {\r\n            hasPrototypeAugmentations = true;\r\n            if (enabled) {\r\n                Object.defineProperty(app.config.globalProperties, key, descriptors[key]);\r\n            }\r\n        }\r\n    }\r\n    if (__DEV__ && hasPrototypeAugmentations) {\r\n        warnDeprecation(\"GLOBAL_PROTOTYPE\" /* GLOBAL_PROTOTYPE */, null);\r\n    }\r\n}\r\nfunction installCompatMount(app, context, render) {\r\n    let isMounted = false;\r\n    /**\r\n     * Vue 2 supports the behavior of creating a component instance but not\r\n     * mounting it, which is no longer possible in Vue 3 - this internal\r\n     * function simulates that behavior.\r\n     */\r\n    app._createRoot = options => {\r\n        const component = app._component;\r\n        const vnode = createVNode(component, options.propsData || null);\r\n        vnode.appContext = context;\r\n        const hasNoRender = !isFunction(component) && !component.render && !component.template;\r\n        const emptyRender = () => { };\r\n        // create root instance\r\n        const instance = createComponentInstance(vnode, null, null);\r\n        // suppress \"missing render fn\" warning since it can't be determined\r\n        // until $mount is called\r\n        if (hasNoRender) {\r\n            instance.render = emptyRender;\r\n        }\r\n        setupComponent(instance);\r\n        vnode.component = instance;\r\n        vnode.isCompatRoot = true;\r\n        // $mount & $destroy\r\n        // these are defined on ctx and picked up by the $mount/$destroy\r\n        // public property getters on the instance proxy.\r\n        // Note: the following assumes DOM environment since the compat build\r\n        // only targets web. It essentially includes logic for app.mount from\r\n        // both runtime-core AND runtime-dom.\r\n        instance.ctx._compat_mount = (selectorOrEl) => {\r\n            if (isMounted) {\r\n                __DEV__ && warn(`Root instance is already mounted.`);\r\n                return;\r\n            }\r\n            let container;\r\n            if (typeof selectorOrEl === 'string') {\r\n                // eslint-disable-next-line\r\n                const result = document.querySelector(selectorOrEl);\r\n                if (!result) {\r\n                    __DEV__ &&\r\n                        warn(`Failed to mount root instance: selector \"${selectorOrEl}\" returned null.`);\r\n                    return;\r\n                }\r\n                container = result;\r\n            }\r\n            else {\r\n                // eslint-disable-next-line\r\n                container = selectorOrEl || document.createElement('div');\r\n            }\r\n            const isSVG = container instanceof SVGElement;\r\n            // HMR root reload\r\n            if (__DEV__) {\r\n                context.reload = () => {\r\n                    const cloned = cloneVNode(vnode);\r\n                    // compat mode will use instance if not reset to null\r\n                    cloned.component = null;\r\n                    render(cloned, container, isSVG);\r\n                };\r\n            }\r\n            // resolve in-DOM template if component did not provide render\r\n            // and no setup/mixin render functions are provided (by checking\r\n            // that the instance is still using the placeholder render fn)\r\n            if (hasNoRender && instance.render === emptyRender) {\r\n                // root directives check\r\n                if (__DEV__) {\r\n                    for (let i = 0; i < container.attributes.length; i++) {\r\n                        const attr = container.attributes[i];\r\n                        if (attr.name !== 'v-cloak' && /^(v-|:|@)/.test(attr.name)) {\r\n                            warnDeprecation(\"GLOBAL_MOUNT_CONTAINER\" /* GLOBAL_MOUNT_CONTAINER */, null);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                instance.render = null;\r\n                component.template = container.innerHTML;\r\n                finishComponentSetup(instance, false, true /* skip options */);\r\n            }\r\n            // clear content before mounting\r\n            container.innerHTML = '';\r\n            // TODO hydration\r\n            render(vnode, container, isSVG);\r\n            if (container instanceof Element) {\r\n                container.removeAttribute('v-cloak');\r\n                container.setAttribute('data-v-app', '');\r\n            }\r\n            isMounted = true;\r\n            app._container = container;\r\n            container.__vue_app__ = app;\r\n            if (__DEV__ || __FEATURE_PROD_DEVTOOLS__) {\r\n                devtoolsInitApp(app, version);\r\n            }\r\n            return instance.proxy;\r\n        };\r\n        instance.ctx._compat_destroy = () => {\r\n            if (isMounted) {\r\n                render(null, app._container);\r\n                if (__DEV__ || __FEATURE_PROD_DEVTOOLS__) {\r\n                    devtoolsUnmountApp(app);\r\n                }\r\n                delete app._container.__vue_app__;\r\n            }\r\n            else {\r\n                const { bum, scope, um } = instance;\r\n                // beforeDestroy hooks\r\n                if (bum) {\r\n                    invokeArrayFns(bum);\r\n                }\r\n                if (isCompatEnabled(\"INSTANCE_EVENT_HOOKS\" /* INSTANCE_EVENT_HOOKS */, instance)) {\r\n                    instance.emit('hook:beforeDestroy');\r\n                }\r\n                // stop effects\r\n                if (scope) {\r\n                    scope.stop();\r\n                }\r\n                // unmounted hook\r\n                if (um) {\r\n                    invokeArrayFns(um);\r\n                }\r\n                if (isCompatEnabled(\"INSTANCE_EVENT_HOOKS\" /* INSTANCE_EVENT_HOOKS */, instance)) {\r\n                    instance.emit('hook:destroyed');\r\n                }\r\n            }\r\n        };\r\n        return instance.proxy;\r\n    };\r\n}\r\nconst methodsToPatch = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'splice',\r\n    'sort',\r\n    'reverse'\r\n];\r\nconst patched = new WeakSet();\r\nfunction defineReactive(obj, key, val) {\r\n    // it's possible for the orignial object to be mutated after being defined\r\n    // and expecting reactivity... we are covering it here because this seems to\r\n    // be a bit more common.\r\n    if (isObject(val) && !isReactive(val) && !patched.has(val)) {\r\n        const reactiveVal = reactive(val);\r\n        if (isArray(val)) {\r\n            methodsToPatch.forEach(m => {\r\n                // @ts-ignore\r\n                val[m] = (...args) => {\r\n                    // @ts-ignore\r\n                    Array.prototype[m].call(reactiveVal, ...args);\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            Object.keys(val).forEach(key => {\r\n                try {\r\n                    defineReactiveSimple(val, key, val[key]);\r\n                }\r\n                catch (e) { }\r\n            });\r\n        }\r\n    }\r\n    const i = obj.$;\r\n    if (i && obj === i.proxy) {\r\n        // target is a Vue instance - define on instance.ctx\r\n        defineReactiveSimple(i.ctx, key, val);\r\n        i.accessCache = Object.create(null);\r\n    }\r\n    else if (isReactive(obj)) {\r\n        obj[key] = val;\r\n    }\r\n    else {\r\n        defineReactiveSimple(obj, key, val);\r\n    }\r\n}\r\nfunction defineReactiveSimple(obj, key, val) {\r\n    val = isObject(val) ? reactive(val) : val;\r\n    Object.defineProperty(obj, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get() {\r\n            track(obj, \"get\" /* GET */, key);\r\n            return val;\r\n        },\r\n        set(newVal) {\r\n            val = isObject(newVal) ? reactive(newVal) : newVal;\r\n            trigger(obj, \"set\" /* SET */, key, newVal);\r\n        }\r\n    });\r\n}\r\n","references":["/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/reactivity/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/shared/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/warning.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/vnode.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/renderer.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/apiCreateApp.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/component.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/componentOptions.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/componentPublicInstance.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/devtools.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/directives.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/scheduler.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/index.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/globalConfig.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/customDirective.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/compatConfig.ts","/Users/zhangpian/Documents/projects/github/vue-next-3.2.24/packages/runtime-core/src/compat/instance.ts"]}
